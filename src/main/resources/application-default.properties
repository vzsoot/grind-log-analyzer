dburl=
dbuser=
dbpass=
grindurl=
report=

# log4j message parser pattern
logFormat = TIMESTAMP LEVEL  LOGGER - MESSAGE

spring.datasource.url=${dburl}
spring.datasource.username=${dbuser}
spring.datasource.password=${dbpass}

# css selectors
analyzer.grind.output.taskSelector = #tasks tr[class]
analyzer.grind.output.descriptionSelector = td:eq(1)
analyzer.grind.output.surefireUrlSelector = td:eq(7) a
analyzer.grind.output.taskIdSelector = td:eq(8)
analyzer.grind.output.taskSuccessfulClass = task-successful

# regular expression
analyzer.surefire.filepattern = .*TEST-.*\\.xml

# table name strings
analyzer.database.grind_tasks_table_name = grind_task
analyzer.database.log_entries_table_name = log_entry
analyzer.database.test_cases_table_name = test_case

# sql string
analyzer.database.initSchema =
analyzer.database.schema = \
  CREATE TABLE IF NOT EXISTS ${analyzer.database.log_entries_table_name} (\
    id SERIAL, \
    testcaseid INTEGER, \
    timestamp TIMESTAMP, \
    milliseconds INT, \
    logger VARCHAR(512), \
    level VARCHAR(12), \
    thread VARCHAR(512), \
    class VARCHAR(512), \
    file VARCHAR(512), \
    line INT, \
    method VARCHAR(512), \
    message TEXT, \
    PRIMARY KEY (id)\
  );\
  CREATE INDEX IF NOT EXISTS logger_index ON ${analyzer.database.log_entries_table_name} (logger); \
  CREATE INDEX IF NOT EXISTS level_index ON ${analyzer.database.log_entries_table_name} (level);\
  CREATE INDEX IF NOT EXISTS testcaseid_index ON ${analyzer.database.log_entries_table_name} (testcaseid);\
  \
  CREATE TABLE IF NOT EXISTS ${analyzer.database.test_cases_table_name} (\
    id SERIAL, \
    taskid VARCHAR(128),\
    methodname VARCHAR(128), \
    classname VARCHAR(128), \
    message TEXT, \
    success NUMERIC(1), \
    PRIMARY KEY (id)\
  );\
  CREATE INDEX IF NOT EXISTS taskid_index ON ${analyzer.database.test_cases_table_name} (taskid);\
  CREATE INDEX IF NOT EXISTS methodname_index ON ${analyzer.database.test_cases_table_name} (methodname);\
  CREATE INDEX IF NOT EXISTS classname_index ON ${analyzer.database.test_cases_table_name} (classname);\
  \
  CREATE TABLE IF NOT EXISTS ${analyzer.database.grind_tasks_table_name} (\
    id SERIAL, \
    description TEXT, \
    surefireurl TEXT, \
    taskid VARCHAR(128),\
    tasksuccess INT, \
    PRIMARY KEY (id)\
  );\
  CREATE INDEX IF NOT EXISTS taskid_index ON ${analyzer.database.grind_tasks_table_name} (taskid);
analyzer.database.insertTaskStatement = INSERT INTO ${analyzer.database.grind_tasks_table_name} \
  (description, surefireurl, taskid, tasksuccess) \
  VALUES \
  (?,?,?,?)
analyzer.database.insertTestCaseStatement = INSERT INTO ${analyzer.database.test_cases_table_name} \
  (taskid, methodname, classname, message, success) \
  VALUES \
  (?,?,?,?,?)
analyzer.database.insertEventStatement = INSERT INTO ${analyzer.database.log_entries_table_name} \
  (testcaseid, timestamp, milliseconds, logger, level, thread, class, file, line, method, message) \
  VALUES \
  (?,to_timestamp(? / 1000),?,?,?,?,?,?,?,?,?)